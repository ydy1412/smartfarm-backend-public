// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using REST_API.Db;

#nullable disable

namespace REST_API.Db.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("REST_API.Models.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FacilityTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("FarmId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FacilityTypeId");

                    b.HasIndex("FarmId");

                    b.ToTable("facility");
                });

            modelBuilder.Entity("REST_API.Models.Farm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FarmManagerId")
                        .HasColumnType("integer");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FarmManagerId");

                    b.ToTable("farm");
                });

            modelBuilder.Entity("REST_API.Models.FarmCrop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CropTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FarmId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CropTypeId");

                    b.HasIndex("FarmId");

                    b.ToTable("farm_crop");
                });

            modelBuilder.Entity("REST_API.Models.FarmManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("farm_manager");
                });

            modelBuilder.Entity("REST_API.Models.FarmSaleOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FarmUnitId")
                        .HasColumnType("integer");

                    b.Property<decimal>("SuggestedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FarmUnitId");

                    b.ToTable("farm_sale_offer");
                });

            modelBuilder.Entity("REST_API.Models.FarmSaleOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FarmSaleOfferId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FarmSaleOfferId");

                    b.HasIndex("UserId");

                    b.ToTable("farm_sale_order");
                });

            modelBuilder.Entity("REST_API.Models.FarmUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FarmId")
                        .HasColumnType("integer");

                    b.Property<decimal>("FarmUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FarmUnitTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.HasIndex("FarmUnitTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("farm_unit");
                });

            modelBuilder.Entity("REST_API.Models.MetaData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentMetaDataId")
                        .HasColumnType("integer");

                    b.Property<string>("TypeCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ParentMetaDataId");

                    b.ToTable("metadata");
                });

            modelBuilder.Entity("REST_API.Models.MetaDataHierarchy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChildId")
                        .HasColumnType("integer");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("ParentId");

                    b.ToTable("metadata-hierarchy");
                });

            modelBuilder.Entity("REST_API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DepositAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsFarmManager")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("REST_API.Models.Facility", b =>
                {
                    b.HasOne("REST_API.Models.MetaData", "FacilityType")
                        .WithMany()
                        .HasForeignKey("FacilityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("REST_API.Models.Farm", "Farm")
                        .WithMany("Facilities")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacilityType");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("REST_API.Models.Farm", b =>
                {
                    b.HasOne("REST_API.Models.FarmManager", "FarmManager")
                        .WithMany("Farms")
                        .HasForeignKey("FarmManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FarmManager");
                });

            modelBuilder.Entity("REST_API.Models.FarmCrop", b =>
                {
                    b.HasOne("REST_API.Models.MetaData", "CropType")
                        .WithMany()
                        .HasForeignKey("CropTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("REST_API.Models.Farm", "Farm")
                        .WithMany("FarmCrops")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CropType");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("REST_API.Models.FarmManager", b =>
                {
                    b.HasOne("REST_API.Models.User", "User")
                        .WithOne("FarmManager")
                        .HasForeignKey("REST_API.Models.FarmManager", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("REST_API.Models.FarmSaleOffer", b =>
                {
                    b.HasOne("REST_API.Models.FarmUnit", "FarmUnit")
                        .WithMany("FarmSalesOffers")
                        .HasForeignKey("FarmUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FarmUnit");
                });

            modelBuilder.Entity("REST_API.Models.FarmSaleOrder", b =>
                {
                    b.HasOne("REST_API.Models.FarmSaleOffer", "FarmSalesOffer")
                        .WithMany("FarmSaleOrders")
                        .HasForeignKey("FarmSaleOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("REST_API.Models.User", "User")
                        .WithMany("FarmSaleOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FarmSalesOffer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("REST_API.Models.FarmUnit", b =>
                {
                    b.HasOne("REST_API.Models.Farm", "Farm")
                        .WithMany("FarmUnits")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("REST_API.Models.MetaData", "FarmUnitType")
                        .WithMany()
                        .HasForeignKey("FarmUnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("REST_API.Models.User", "User")
                        .WithMany("FarmUnits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");

                    b.Navigation("FarmUnitType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("REST_API.Models.MetaData", b =>
                {
                    b.HasOne("REST_API.Models.MetaData", "ParentMetaData")
                        .WithMany("ChildMetaData")
                        .HasForeignKey("ParentMetaDataId");

                    b.Navigation("ParentMetaData");
                });

            modelBuilder.Entity("REST_API.Models.MetaDataHierarchy", b =>
                {
                    b.HasOne("REST_API.Models.MetaData", "ChildMetaData")
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("REST_API.Models.MetaData", "ParentMetaData")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChildMetaData");

                    b.Navigation("ParentMetaData");
                });

            modelBuilder.Entity("REST_API.Models.Farm", b =>
                {
                    b.Navigation("Facilities");

                    b.Navigation("FarmCrops");

                    b.Navigation("FarmUnits");
                });

            modelBuilder.Entity("REST_API.Models.FarmManager", b =>
                {
                    b.Navigation("Farms");
                });

            modelBuilder.Entity("REST_API.Models.FarmSaleOffer", b =>
                {
                    b.Navigation("FarmSaleOrders");
                });

            modelBuilder.Entity("REST_API.Models.FarmUnit", b =>
                {
                    b.Navigation("FarmSalesOffers");
                });

            modelBuilder.Entity("REST_API.Models.MetaData", b =>
                {
                    b.Navigation("ChildMetaData");
                });

            modelBuilder.Entity("REST_API.Models.User", b =>
                {
                    b.Navigation("FarmManager")
                        .IsRequired();

                    b.Navigation("FarmSaleOrders");

                    b.Navigation("FarmUnits");
                });
#pragma warning restore 612, 618
        }
    }
}
